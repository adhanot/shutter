// Code generated by go-swagger; DO NOT EDIT.

package sdb

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new sdb API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for sdb API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	SdbClose(params *SdbCloseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SdbCloseOK, error)

	SdbOpen(params *SdbOpenParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SdbOpenOK, error)

	SdbStop(params *SdbStopParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SdbStopOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  SdbClose closes sdb shutter

  Close sdb shutter
*/
func (a *Client) SdbClose(params *SdbCloseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SdbCloseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSdbCloseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "sdb/close",
		Method:             "POST",
		PathPattern:        "/sdb/close",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SdbCloseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SdbCloseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for sdb/close: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SdbOpen opens sdb shutter

  Open sdb shutter
*/
func (a *Client) SdbOpen(params *SdbOpenParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SdbOpenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSdbOpenParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "sdb/open",
		Method:             "POST",
		PathPattern:        "/sdb/open",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SdbOpenReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SdbOpenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for sdb/open: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SdbStop stops sdb shutter

  Stop sdb shutter
*/
func (a *Client) SdbStop(params *SdbStopParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SdbStopOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSdbStopParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "sdb/stop",
		Method:             "POST",
		PathPattern:        "/sdb/stop",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SdbStopReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SdbStopOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for sdb/stop: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
