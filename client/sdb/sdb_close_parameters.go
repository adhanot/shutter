// Code generated by go-swagger; DO NOT EDIT.

package sdb

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"shutter/models"
)

// NewSdbCloseParams creates a new SdbCloseParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSdbCloseParams() *SdbCloseParams {
	return &SdbCloseParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSdbCloseParamsWithTimeout creates a new SdbCloseParams object
// with the ability to set a timeout on a request.
func NewSdbCloseParamsWithTimeout(timeout time.Duration) *SdbCloseParams {
	return &SdbCloseParams{
		timeout: timeout,
	}
}

// NewSdbCloseParamsWithContext creates a new SdbCloseParams object
// with the ability to set a context for a request.
func NewSdbCloseParamsWithContext(ctx context.Context) *SdbCloseParams {
	return &SdbCloseParams{
		Context: ctx,
	}
}

// NewSdbCloseParamsWithHTTPClient creates a new SdbCloseParams object
// with the ability to set a custom HTTPClient for a request.
func NewSdbCloseParamsWithHTTPClient(client *http.Client) *SdbCloseParams {
	return &SdbCloseParams{
		HTTPClient: client,
	}
}

/* SdbCloseParams contains all the parameters to send to the API endpoint
   for the sdb close operation.

   Typically these are written to a http.Request.
*/
type SdbCloseParams struct {

	/* Close.

	   Registeration Payload
	*/
	Close models.Shutter

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the sdb close params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SdbCloseParams) WithDefaults() *SdbCloseParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the sdb close params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SdbCloseParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the sdb close params
func (o *SdbCloseParams) WithTimeout(timeout time.Duration) *SdbCloseParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the sdb close params
func (o *SdbCloseParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the sdb close params
func (o *SdbCloseParams) WithContext(ctx context.Context) *SdbCloseParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the sdb close params
func (o *SdbCloseParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the sdb close params
func (o *SdbCloseParams) WithHTTPClient(client *http.Client) *SdbCloseParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the sdb close params
func (o *SdbCloseParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithClose adds the close to the sdb close params
func (o *SdbCloseParams) WithClose(close models.Shutter) *SdbCloseParams {
	o.SetClose(close)
	return o
}

// SetClose adds the close to the sdb close params
func (o *SdbCloseParams) SetClose(close models.Shutter) {
	o.Close = close
}

// WriteToRequest writes these params to a swagger request
func (o *SdbCloseParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.Close != nil {
		if err := r.SetBodyParam(o.Close); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
