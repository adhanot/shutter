// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"shutter/models"
)

// RegisterOKCode is the HTTP code returned for type RegisterOK
const RegisterOKCode int = 200

/*RegisterOK Successful registeration

swagger:response registerOK
*/
type RegisterOK struct {

	/*
	  In: Body
	*/
	Payload *models.Success `json:"body,omitempty"`
}

// NewRegisterOK creates RegisterOK with default headers values
func NewRegisterOK() *RegisterOK {

	return &RegisterOK{}
}

// WithPayload adds the payload to the register o k response
func (o *RegisterOK) WithPayload(payload *models.Success) *RegisterOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the register o k response
func (o *RegisterOK) SetPayload(payload *models.Success) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RegisterOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RegisterBadRequestCode is the HTTP code returned for type RegisterBadRequest
const RegisterBadRequestCode int = 400

/*RegisterBadRequest Error Registration

swagger:response registerBadRequest
*/
type RegisterBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewRegisterBadRequest creates RegisterBadRequest with default headers values
func NewRegisterBadRequest() *RegisterBadRequest {

	return &RegisterBadRequest{}
}

// WithPayload adds the payload to the register bad request response
func (o *RegisterBadRequest) WithPayload(payload *models.Error) *RegisterBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the register bad request response
func (o *RegisterBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RegisterBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RegisterInternalServerErrorCode is the HTTP code returned for type RegisterInternalServerError
const RegisterInternalServerErrorCode int = 500

/*RegisterInternalServerError Server error

swagger:response registerInternalServerError
*/
type RegisterInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ServerError `json:"body,omitempty"`
}

// NewRegisterInternalServerError creates RegisterInternalServerError with default headers values
func NewRegisterInternalServerError() *RegisterInternalServerError {

	return &RegisterInternalServerError{}
}

// WithPayload adds the payload to the register internal server error response
func (o *RegisterInternalServerError) WithPayload(payload *models.ServerError) *RegisterInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the register internal server error response
func (o *RegisterInternalServerError) SetPayload(payload *models.ServerError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RegisterInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
