// Code generated by go-swagger; DO NOT EDIT.

package sdb

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"shutter/models"
)

// SdbCloseOKCode is the HTTP code returned for type SdbCloseOK
const SdbCloseOKCode int = 200

/*SdbCloseOK Successful Close

swagger:response sdbCloseOK
*/
type SdbCloseOK struct {

	/*
	  In: Body
	*/
	Payload *models.Success `json:"body,omitempty"`
}

// NewSdbCloseOK creates SdbCloseOK with default headers values
func NewSdbCloseOK() *SdbCloseOK {

	return &SdbCloseOK{}
}

// WithPayload adds the payload to the sdb close o k response
func (o *SdbCloseOK) WithPayload(payload *models.Success) *SdbCloseOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the sdb close o k response
func (o *SdbCloseOK) SetPayload(payload *models.Success) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SdbCloseOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SdbCloseBadRequestCode is the HTTP code returned for type SdbCloseBadRequest
const SdbCloseBadRequestCode int = 400

/*SdbCloseBadRequest Error

swagger:response sdbCloseBadRequest
*/
type SdbCloseBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewSdbCloseBadRequest creates SdbCloseBadRequest with default headers values
func NewSdbCloseBadRequest() *SdbCloseBadRequest {

	return &SdbCloseBadRequest{}
}

// WithPayload adds the payload to the sdb close bad request response
func (o *SdbCloseBadRequest) WithPayload(payload *models.Error) *SdbCloseBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the sdb close bad request response
func (o *SdbCloseBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SdbCloseBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SdbCloseInternalServerErrorCode is the HTTP code returned for type SdbCloseInternalServerError
const SdbCloseInternalServerErrorCode int = 500

/*SdbCloseInternalServerError Server error

swagger:response sdbCloseInternalServerError
*/
type SdbCloseInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ServerError `json:"body,omitempty"`
}

// NewSdbCloseInternalServerError creates SdbCloseInternalServerError with default headers values
func NewSdbCloseInternalServerError() *SdbCloseInternalServerError {

	return &SdbCloseInternalServerError{}
}

// WithPayload adds the payload to the sdb close internal server error response
func (o *SdbCloseInternalServerError) WithPayload(payload *models.ServerError) *SdbCloseInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the sdb close internal server error response
func (o *SdbCloseInternalServerError) SetPayload(payload *models.ServerError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SdbCloseInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
